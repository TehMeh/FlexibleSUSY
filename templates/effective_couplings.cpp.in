// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_effective_couplings.hpp"

#include "effective_couplings.hpp"
#include "wrappers.hpp"

namespace flexiblesusy {

using namespace effective_couplings;

#define INPUTPARAMETER(parameter) model.get_input().parameter
#define MODELPARAMETER(parameter) model.get_##parameter()
#define DERIVEDPARAMETER(parameter) model.##parameter()
#define PHASE(parameter) model.get_##parameter()
#define PHYSICAL(parameter) model.get_physical().parameter

@ModelName@_effective_couplings::@ModelName@_effective_couplings(
   const @ModelName@_mass_eigenstates& model_,
   const softsusy::QedQcd& qedqcd_,
   const Physical_input& input_)
   : model(model_), qedqcd(qedqcd_), physical_input(input_)
   , rg_improve(true), include_qcd_corrections(true)
@mixingMatricesInit@
@loopCouplingsInit@
{
}

void @ModelName@_effective_couplings::calculate_effective_couplings()
{
   const standard_model::Standard_model sm(initialise_SM());

@calculateLoopCouplings@
}

void @ModelName@_effective_couplings::set_model(const @ModelName@_mass_eigenstates& model_)
{
   model = model_;
   copy_mixing_matrices_from_model();
}

void @ModelName@_effective_couplings::copy_mixing_matrices_from_model()
{
@copyMixingMatrices@
}

standard_model::Standard_model @ModelName@_effective_couplings::initialise_SM() const
{
   standard_model::Standard_model sm;

   sm.set_loops(2);
   sm.set_thresholds(2);
   sm.set_physical_input(physical_input);

   sm.initialise_from_input(qedqcd);

   return sm;
}

void @ModelName@_effective_couplings::run_SM_strong_coupling_to(standard_model::Standard_model sm, precise_real_type m)
{
   sm.run_to(m);

@setSMStrongCoupling@
}

precise_complex_type @ModelName@_effective_couplings::scalar_scalar_qcd_factor(precise_real_type m_decay, precise_real_type m_loop) const
{
   precise_complex_type result(1.0_p, 0.0_p);

   if (include_qcd_corrections) {
@calculateScalarScalarLoopQCDFactor@
   }

   return result;
}

precise_complex_type @ModelName@_effective_couplings::scalar_fermion_qcd_factor(precise_real_type m_decay, precise_real_type m_loop) const
{
   precise_complex_type result(1.0_p, 0.0_p);

   if (include_qcd_corrections) {
@calculateScalarFermionLoopQCDFactor@
   }

   return result;
}

precise_complex_type @ModelName@_effective_couplings::pseudoscalar_fermion_qcd_factor(precise_real_type m_decay, precise_real_type m_loop) const
{
   precise_complex_type result(1.0_p, 0.0_p);

   if (include_qcd_corrections) {
@calculatePseudoscalarFermionLoopQCDFactor@
   }

   return result;
}

precise_real_type @ModelName@_effective_couplings::number_of_active_flavours(precise_real_type m) const
{
   if (m < qedqcd.displayMbMb()) {
      return 4.0_p;
   } else if (m < qedqcd.displayPoleMt()) {
      return 5.0_p;
   } else {
      return 6.0_p;
   }
}

precise_real_type @ModelName@_effective_couplings::scalar_scaling_factor(precise_real_type m) const
{
   const precise_real_type Nf = number_of_active_flavours(m);
   const precise_real_type mtpole = qedqcd.displayPoleMt();
   const precise_real_type l = Log(Sqr(m) / Sqr(mtpole));

@calculateScalarQCDScalingFactor@
   return Sqrt(1.0_p + nlo_qcd + nnlo_qcd + nnnlo_qcd);
}

precise_real_type @ModelName@_effective_couplings::pseudoscalar_scaling_factor(precise_real_type m) const
{
   const precise_real_type Nf = number_of_active_flavours(m);
   const precise_real_type mtpole = qedqcd.displayPoleMt();
   const precise_real_type l = Log(Sqr(m) / Sqr(mtpole));

@calculatePseudoscalarQCDScalingFactor@
   return Sqrt(1.0_p + nlo_qcd + nnlo_qcd + nnnlo_qcd);
}

@partialWidthGetters@
@loopCouplingsFunctions@
} // namespace flexiblesusy
