// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_edm.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_edm.hpp"
#include "@ModelName@_mass_eigenstates.hpp"

#include "cxx_qft/@ModelName@_qft.hpp"

#include "wrappers.hpp"
#include "numerics2.hpp"

#define INPUTPARAMETER(p) context.model.get_input().p
#define MODELPARAMETER(p) context.model.get_##p()
#define DERIVEDPARAMETER(p) context.model.p()
#define PHASE(p) context.model.get_##p()

using namespace flexiblesusy;
using namespace @ModelName@_cxx_diagrams;

namespace {
const precise_real_type oneOver16PiSquared = 0.0063325739776461107152_p;

/**
 * @class EDMVertexCorrectionSF
 * @brief A template that calculate contributions to the EDM
 *        of a given particle in a one loop diagram specified
 *        by a photon emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
namespace EDMVertexCorrectionSF {

  template<class EDMField, class PhotonEmitter, class ExchangeParticle>
   precise_real_type value(const typename field_indices<EDMField>::type& indices,
                       context_base& context);
};

/**
* @class EDMVertexCorrectionFS
* @brief A template that calculate contributions to the EDM
*        of a given particle in a one loop diagram specified
*        by a photon emitter and an exchange particle.
* @tparam Args Specifies in order the field of which to
*              calculate the electric dipole moment,
*              the photon emitter and the exchange particle
*              in a one-loop diagram where the photon emitter
*              is a fermion and the exchange particle a scalar.
*
* This template evaluates the contribution to the electric
* dipole moment of a one loop diagram with fields given by
* \a Args.
*/
namespace EDMVertexCorrectionFS {
   template<class EDMField, class PhotonEmitter, class ExchangeParticle>
   precise_real_type value(const typename field_indices<EDMField>::type& indices,
                       context_base& context);
};
} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_edm {
@EDM_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {
/**
* @defgroup LoopFunctions Loop functions
* @brief The loop functions necessary for edm one-loop calculations.
*
* These are OneLoopFunctionA(), OneLoopFunctionB()
* as specified in arXiv:0808.1819_p
*/

precise_real_type OneLoopFunctionA(precise_real_type r)
{
   if (is_zero(r))
      return std::numeric_limits<precise_real_type>::infinity();

   const precise_real_type d = r - 1.0_p;

   if (abs(d) < 0.15_p) {
      return (-0.33333333333333333333_p +
              0.25000000000000000000_p  * d -
              0.20000000000000000000_p  * d * d +
              0.16666666666666666667_p  * d * d * d -
              0.14285714285714285714_p  * d * d * d * d +
              0.12500000000000000000_p  * d * d * d * d * d -
              0.11111111111111111111_p  * d * d * d * d * d * d +
              0.10000000000000000000_p  * d * d * d * d * d * d * d -
              0.090909090909090909091_p * d * d * d * d * d * d * d * d +
              0.083333333333333333333_p * d * d * d * d * d * d * d * d * d -
              0.076923076923076923077_p * d * d * d * d * d * d * d * d * d * d);
   }

   return 1.0_p / (2.0_p * d * d) * (3.0_p - r - 2.0_p * log(r) / d);
}

precise_real_type OneLoopFunctionB(precise_real_type r)
{
   if (is_zero(r))
      return 1.0_p/2.0_p;

   const precise_real_type d = r - 1.0_p;

   if (abs(d) < 0.15_p)
      return (0.16666666666666666667_p -
              0.083333333333333333333_p  * d +
              0.050000000000000000000_p  * d * d -
              0.033333333333333333333_p  * d * d * d +
              0.023809523809523809524_p  * d * d * d * d -
              0.017857142857142857143_p  * d * d * d * d * d +
              0.013888888888888888889_p  * d * d * d * d * d * d -
              0.011111111111111111111_p  * d * d * d * d * d * d * d +
              0.0090909090909090909091_p * d * d * d * d * d * d * d * d -
              0.0075757575757575757576_p * d * d * d * d * d * d * d * d * d +
              0.0064102564102564102564_p * d * d * d * d * d * d * d * d * d * d);

   return 1.0_p / (2.0_p * d * d) * (1.0_p + r - 2.0_p * r * log(r) / d);
}

namespace EDMVertexCorrectionFS{

  template<class EDMField, class PhotonEmitter, class ExchangeField>
  precise_real_type value(const typename field_indices<EDMField>::type& indices, context_base& context)
  {
     precise_real_type res = 0.0_p;

     using FermionVertex = Vertex<
                           EDMField,
                           ExchangeField,
                           PhotonEmitter
                           >;

     for (const auto& index: index_range<FermionVertex>()) {
        const auto edmFieldIndices = FermionVertex::template indices_of_field<0>(index);

        if (edmFieldIndices != indices)
           continue;

        const auto photonEmitterIndices = FermionVertex::template indices_of_field<2>(index);
        const auto exchangeFieldIndices = FermionVertex::template indices_of_field<1>(index);
        const auto vertex = FermionVertex::evaluate(index, context);

        const auto photonEmitterMass = context.mass<PhotonEmitter>(photonEmitterIndices);
        const auto exchangeFieldMass = context.mass<ExchangeField>(exchangeFieldIndices);

        const precise_real_type photonEmitterCharge =
           - PhotonEmitter::electric_charge * unit_charge(context);

        const precise_real_type numericFactor = oneOver16PiSquared;
        const precise_real_type massFactor = precise_real_type(photonEmitterMass/(exchangeFieldMass * exchangeFieldMass));
        const precise_real_type couplingFactor = precise_real_type(precise_complex_type(boost::multiprecision::conj(vertex.right())).imag() * vertex.left().imag());

        const precise_real_type massRatioSquared = Sqr(precise_real_type(photonEmitterMass/exchangeFieldMass));
        const precise_real_type loopFactor = photonEmitterCharge * OneLoopFunctionA(massRatioSquared);
        const precise_real_type contribution = numericFactor * massFactor * couplingFactor * loopFactor;

        res += contribution;
     }

     return res;
  }
}


namespace EDMVertexCorrectionSF{
  template<class EDMField, class PhotonEmitter, class ExchangeField>
  precise_real_type value(const typename field_indices<EDMField>::type& indices, context_base& context)
  {
     precise_real_type res = 0.0_p;

     using FermionVertex = Vertex<
                           EDMField,
                           ExchangeField,
                           PhotonEmitter
                           >;

     for (const auto& index: index_range<FermionVertex>()) {
        const auto edmFieldIndices = FermionVertex::template indices_of_field<0>(index);

        if (edmFieldIndices != indices)
           continue;

        const auto photonEmitterIndices = FermionVertex::template indices_of_field<2>(index);
        const auto exchangeFieldIndices = FermionVertex::template indices_of_field<1>(index);
        const auto vertex = FermionVertex::evaluate(index, context);

        const auto photonEmitterMass = context.mass<PhotonEmitter>(photonEmitterIndices);
        const auto exchangeFieldMass = context.mass<ExchangeField>(exchangeFieldIndices);

        const precise_real_type photonEmitterCharge =
           - PhotonEmitter::electric_charge * unit_charge(context);

        const precise_real_type numericFactor = oneOver16PiSquared;
        const precise_real_type massFactor = precise_real_type(exchangeFieldMass/(photonEmitterMass * photonEmitterMass));
        const precise_real_type couplingFactor = precise_real_type(precise_complex_type(boost::multiprecision::conj(vertex.right())).imag() * vertex.left().imag());

        const precise_real_type massRatioSquared = Sqr(precise_real_type(exchangeFieldMass / photonEmitterMass));
        const precise_real_type loopFactor = photonEmitterCharge * OneLoopFunctionB(massRatioSquared);
        const precise_real_type contribution = numericFactor * massFactor * couplingFactor * loopFactor;

        res += contribution;
     }

     return res;
  }
}
} // anonymous namespace
