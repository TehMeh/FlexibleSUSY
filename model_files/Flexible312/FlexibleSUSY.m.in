
FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = "Flexible312";

OnlyLowEnergyFlexibleSUSY = True;

(* input parameters *)

MINPAR = {
    {1, Z1111IN},
    {2, Z2222IN},
    {3, Z2211IN},
    {4, Z2112IN},
    {5, Z2121rIN},
    {6, Z1112rIN},
    {7, Z2212rIN},
	{9, M222IN},
	{12, MRrIN},
	{13, etaIN}
};
IMMINPAR = { 
	{5, Z2121iIN},
    {6, Z1112iIN},
    {7, Z2212iIN},
	{12, MRiIN}
};

EXTPAR = {
    {0, Qin}
};

RealParameters={};
(*By default this line would be set to All, THIS EMPTY LIST IS IMPORTANT. With this empty list the "realness" of parameters are treated like in SARAH*)

(*additional parameters for real and imaginary parts of complex parameters*)

FSAuxiliaryParameterInfo={

(*the part for having complex input matrices*)

{Yv1rIN, { InputParameter->True,
		   ParameterDimensions-> {3},
		   LesHouches -> YV1IN
		 } },
{Yv1iIN, { InputParameter->True,
		   ParameterDimensions-> {3},
		   LesHouches -> IMYV1IN
		 } },
{Yv2rIN, { InputParameter->True,
		   ParameterDimensions-> {3},
		   LesHouches -> YV2IN
		 } },
{Yv2iIN, { InputParameter->True,
		   ParameterDimensions-> {3},
		   LesHouches -> IMYV2IN
		 } },
{Ye2rIN, { InputParameter->True,
		   ParameterDimensions-> {3,3},
		   LesHouches -> YE2IN
		 } },
{Ye2iIN, { InputParameter->True,
		   ParameterDimensions-> {3,3},
		   LesHouches -> IMYE2IN
		 } },
{Yd2rIN, { InputParameter->True,
		   ParameterDimensions-> {3,3},
		   LesHouches -> YD2IN
		 } },
{Yd2iIN, { InputParameter->True,
		   ParameterDimensions-> {3,3},
		   LesHouches -> IMYD2IN
		 } },
{Yu2rIN, { InputParameter->True,
		   ParameterDimensions-> {3,3},
		   LesHouches -> YU2IN
		 } },
{Yu2iIN, { InputParameter->True,
		   ParameterDimensions-> {3,3},
		   LesHouches -> IMYU2IN
		 } }
}

TreeLevelEWSBSolution = List @@@ {
	M112 -> -((v^3 Z1111 - tadpole[1])/v), 
	Re[M12] -> (1/(4 v)) E^(-I eta) (-E^(I eta) v^3 Z1112 - E^(I eta) v^3 conj[Z1112] + 
    		2 tadpole[2] + 2 E^(2 I eta) tadpole[2] - 2 I tadpole[3] + 
   			2 I E^(2 I eta) tadpole[3]), 
	Im[M12] -> -(1/(4 v)) E^(-I eta) (-I E^(I eta) v^3 Z1112 + I E^(I eta) v^3 conj[Z1112] + 2 I 					tadpole[2] - 2 I E^(2 I eta) tadpole[2] + 2 tadpole[3] + 2 E^(2 I eta) tadpole[3])
}; (* Thanks to A. Voigt *)

EWSBOutputParameters = {Im[M12], Re[M12], M112};

EWSBInitialGuess={
	{M112, -v^2 Z1111IN},
	{M12, -v^2 (Z1112rIN+I*Z1112iIN)/2}
}

SUSYScale = Qin;

SUSYScaleFirstGuess = Qin;

SUSYScaleInput = {
    {Z1111, Z1111IN},
    {Z2222, Z2222IN},
    {Z2211, Z2211IN},
    {Z2112, Z2112IN},
    {Z2121, Z2121rIN+I*Z2121iIN},
    {Z1112, Z1112rIN+I*Z1112iIN},
    {Z2212, Z2212rIN+I*Z2212iIN},
	{M222,  M222IN},
    {MR, MRrIN+I*MRiIN},
	{eta, etaIN}
};

LowScale = LowEnergyConstant[MZ];

LowScaleFirstGuess = LowEnergyConstant[MZ];

LowScaleInput = {
   {v, LowEnergyConstant[vev]},
   {Yu1, Automatic},
   {Yd1, Automatic},
   {Ye1, Automatic},
   {Yu2, Yu2rIN+I*Yu2iIN},
   {Yd2, Yd2rIN+I*Yd2iIN},
   {Ye2, Ye2rIN+I*Ye2iIN},
   {Yv1, Yv1rIN+I*Yv1iIN},
   {Yv2, Yv2rIN+I*Yv2iIN}
   
};

InitialGuessAtLowScale = {
   {v, LowEnergyConstant[vev]},
   {Yu1, Automatic},
   {Yd1, Automatic},
   {Ye1, Automatic}
};

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision    = {hh,Hm,Fv};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

NumberOfDigits = {40}; (*default or >0 integers*) (*added S.D.*)

ExtraSLHAOutputBlocks = {
    {EFFHIGGSCOUPLINGS, NoScale,
           {{1, FlexibleSUSYObservable`CpHiggsPhotonPhoton},
            {2, FlexibleSUSYObservable`CpHiggsGluonGluon},
            {3, FlexibleSUSYObservable`CpPseudoScalarPhotonPhoton},
            {4, FlexibleSUSYObservable`CpPseudoScalarGluonGluon}} 
    },
	{FlexibleSUSYLowEnergy,
			{{23, FlexibleSUSYObservable`EDM[Fe[1]]}
			 ,{24, FlexibleSUSYObservable`EDM[Fe[2]]}
             ,{25, FlexibleSUSYObservable`BrLToLGamma[Fe[2]->{Fe[1],VP}]} 
            } 
    },

		(*output of imaginary parts*)
	(*{IMVPMNS, {	{1, 1, Im[Pole @ Vpmns[1,1]]},
				{1, 2, Im[Pole @ Vpmns[1,2]]},
				{1, 3, Im[Pole @ Vpmns[1,3]]},
				{1, 4, Im[Pole @ Vpmns[1,4]]},

				{2, 1, Im[Pole @ Vpmns[2,1]]},
				{2, 2, Im[Pole @ Vpmns[2,2]]},
				{2, 3, Im[Pole @ Vpmns[2,3]]},
				{2, 4, Im[Pole @ Vpmns[2,4]]},

				{3, 1, Im[Pole @ Vpmns[3,1]]},
				{3, 2, Im[Pole @ Vpmns[3,2]]},
				{3, 3, Im[Pole @ Vpmns[3,3]]},
				{3, 4, Im[Pole @ Vpmns[3,4]]},
			
				{4, 1, Im[Pole @ Vpmns[4,1]]},
				{4, 2, Im[Pole @ Vpmns[4,2]]},
				{4, 3, Im[Pole @ Vpmns[4,3]]},
				{4, 4, Im[Pole @ Vpmns[4,4]]}
			  } }, *)
    (* the following blocks contain the physical mixing matrix elements *)
	{IMUELMIX, { {1, 1 , Im[Pole @ Ve[1,1]]},
				 {1, 2 , Im[Pole @ Ve[1,2]]},
				 {1, 3 , Im[Pole @ Ve[1,3]]},
			
	 	 		 {2, 1 , Im[Pole @ Ve[2,1]]},
				 {2, 2 , Im[Pole @ Ve[2,2]]},
				 {2, 3 , Im[Pole @ Ve[2,3]]},
	 			 
				 {3, 1 , Im[Pole @ Ve[3,1]]},
				 {3, 2 , Im[Pole @ Ve[3,2]]},
				 {3, 3 , Im[Pole @ Ve[3,3]]}
			   } },

	{IMUERMIX, { {1, 1 , Im[Pole @ Ue[1,1]]},
				 {1, 2 , Im[Pole @ Ue[1,2]]},
				 {1, 3 , Im[Pole @ Ue[1,3]]},
			
	 	 		 {2, 1 , Im[Pole @ Ue[2,1]]},
				 {2, 2 , Im[Pole @ Ue[2,2]]},
				 {2, 3 , Im[Pole @ Ue[2,3]]},
	 			 
				 {3, 1 , Im[Pole @ Ue[3,1]]},
				 {3, 2 , Im[Pole @ Ue[3,2]]},
				 {3, 3 , Im[Pole @ Ue[3,3]]}
			   } },
	{IMUULMIX, { {1, 1 , Im[Pole @ Vu[1,1]]},
				 {1, 2 , Im[Pole @ Vu[1,2]]},
				 {1, 3 , Im[Pole @ Vu[1,3]]},
			
	 	 		 {2, 1 , Im[Pole @ Vu[2,1]]},
				 {2, 2 , Im[Pole @ Vu[2,2]]},
				 {2, 3 , Im[Pole @ Vu[2,3]]},
	 			 
				 {3, 1 , Im[Pole @ Vu[3,1]]},
				 {3, 2 , Im[Pole @ Vu[3,2]]},
				 {3, 3 , Im[Pole @ Vu[3,3]]}
			   } },

	{IMUURMIX, { {1, 1 , Im[Pole @ Uu[1,1]]},
				 {1, 2 , Im[Pole @ Uu[1,2]]},
				 {1, 3 , Im[Pole @ Uu[1,3]]},
			
	 	 		 {2, 1 , Im[Pole @ Uu[2,1]]},
				 {2, 2 , Im[Pole @ Uu[2,2]]},
				 {2, 3 , Im[Pole @ Uu[2,3]]},
	 			 
				 {3, 1 , Im[Pole @ Uu[3,1]]},
				 {3, 2 , Im[Pole @ Uu[3,2]]},
				 {3, 3 , Im[Pole @ Uu[3,3]]}
			   } },
	{IMUDLMIX, { {1, 1 , Im[Pole @ Vd[1,1]]},
				 {1, 2 , Im[Pole @ Vd[1,2]]},
				 {1, 3 , Im[Pole @ Vd[1,3]]},
			
	 	 		 {2, 1 , Im[Pole @ Vd[2,1]]},
				 {2, 2 , Im[Pole @ Vd[2,2]]},
				 {2, 3 , Im[Pole @ Vd[2,3]]},
	 			 
				 {3, 1 , Im[Pole @ Vd[3,1]]},
				 {3, 2 , Im[Pole @ Vd[3,2]]},
				 {3, 3 , Im[Pole @ Vd[3,3]]}
			   } },

	{IMUDRMIX, { {1, 1 , Im[Pole @ Ud[1,1]]},
				 {1, 2 , Im[Pole @ Ud[1,2]]},
				 {1, 3 , Im[Pole @ Ud[1,3]]},
			
	 	 		 {2, 1 , Im[Pole @ Ud[2,1]]},
				 {2, 2 , Im[Pole @ Ud[2,2]]},
				 {2, 3 , Im[Pole @ Ud[2,3]]},
	 			 
				 {3, 1 , Im[Pole @ Ud[3,1]]},
				 {3, 2 , Im[Pole @ Ud[3,2]]},
				 {3, 3 , Im[Pole @ Ud[3,3]]}
			   } }
};
