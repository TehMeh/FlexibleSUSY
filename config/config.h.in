/* DO NOT EDIT! GENERATED AUTOMATICALLY! */
/* generated at @DATE@ */

#ifndef CONFIG_H
#define CONFIG_H

#define PKGNAME "@PKGNAME@"

#define FLEXIBLESUSY_VERSION  "@FLEXIBLESUSY_VERSION@"
#define FLEXIBLESUSY_MAJOR    @FLEXIBLESUSY_MAJOR@
#define FLEXIBLESUSY_MINOR    @FLEXIBLESUSY_MINOR@
#define FLEXIBLESUSY_PATCH    @FLEXIBLESUSY_PATCH@
#define FLEXIBLESUSY_EXTRA    "@FLEXIBLESUSY_EXTRA@"
#define GIT_COMMIT            "@GIT_COMMIT@"

#define SARAH_VERSION         "@SARAH_VERSION@"
#define SARAH_MAJOR           @SARAH_MAJOR@
#define SARAH_MINOR           @SARAH_MINOR@
#define SARAH_PATCH           @SARAH_PATCH@

#define MATHEMATICA_VERSION   @MATH_VERSION@

#define GM2CALC_VERSION       "@GM2CALC_VERSION@"
#define HIMALAYA_VERSION      "@HIMALAYA_VERSION@"

/* System information */
#define OPERATING_SYSTEM      "@OPERATING_SYSTEM@"
#define KERNEL_VERSION        "@KERNEL_VERSION@"

/* Build variables */
#define BOOSTFLAGS            "@BOOSTFLAGS@"
#define BOOSTTESTLIBS         "@BOOSTTESTLIBS@"
#define BOOSTTHREADLIBS       "@BOOSTTHREADLIBS@"
#define CPPFLAGS              "@CPPFLAGS@"
#define CXX                   "@CXX@"
#define CXXFLAGS              "@CXXFLAGS@"
#define EIGENFLAGS            "@EIGENFLAGS@"
#define FC                    "@FC@"
#define FFLAGS                "@FFLAGS@"
#define FLIBS                 "@FLIBS@"
#define FMOD                  "@FMOD@"
#define FSTD                  "@FSTD@"
#define FUTILIBS              "@FUTILIBS@"
#define GM2CALCFLAGS          "@GM2CALCFLAGS@"
#define GM2CALCLIBS           "@GM2CALCLIBS@"
#define HIMALAYAFLAGS         "@HIMALAYAFLAGS@"
#define HIMALAYALIBS          "@HIMALAYALIBS@"
#define GSLFLAGS              "@GSLFLAGS@"
#define GSLLIBS               "@GSLLIBS@"
#define LDFLAGS               "@LDFLAGS@"
#define LDLIBS                "@LDLIBS@"
#define LLFLAGS               "@LLFLAGS@"
#define LLLIBS                "@LLLIBS@"
#define COLLIERFLAGS          "@COLLIERFLAGS@"
#define COLLIERLIBS           "@COLLIERLIBS@"
#define LOOPFUNCFLAGS         "@LOOPFUNCFLAGS@"
#define LOOPFUNCLIBS          "@LOOPFUNCLIBS@"
#define SQLITELIBS            "@SQLITELIBS@"
#define SQLITEFLAGS           "@SQLITEFLAGS@"
#define THREADLIBS            "@THREADLIBS@"
#define TSILLIBS              "@TSILLIBS@"
#define TSILFLAGS             "@TSILFLAGS@"

/* Switches */

/* Enable colored printout */
@DEFINE_ENABLE_COLORS@

/* Enable eigenvalues error check */
@DEFINE_ENABLE_CHECK_EIGENVALUE_ERROR@

/* Enable debug mode */
@DEFINE_ENABLE_DEBUG@

/* Enable silent mode */
@DEFINE_ENABLE_SILENT@

/* Enable verbose mode */
@DEFINE_ENABLE_VERBOSE@

/* Enable fflite */
@DEFINE_ENABLE_FFLITE@

/* Enable GM2Calc */
@DEFINE_ENABLE_GM2CALC@

/* Enable Himalaya */
@DEFINE_ENABLE_HIMALAYA@

/* Enable LibraryLink */
@DEFINE_ENABLE_LIBRARYLINK@

/* Enable LoopTools */
@DEFINE_ENABLE_LOOPTOOLS@

/* Enable COLLIER */
@DEFINE_ENABLE_COLLIER@

/* Enable odeint */
@DEFINE_ENABLE_ODEINT@

/* Enable sqlite */
@DEFINE_ENABLE_SQLITE@

/* Enable multi-threading */
@DEFINE_ENABLE_THREADS@

/* Enable tsil */
@DEFINE_ENABLE_TSIL@

/* Enable <random> header */
@DEFINE_ENABLE_RANDOM@

/* Enable two-scale BVP solver */
@DEFINE_ENABLE_TWO_SCALE_SOLVER@

/* Enable lattice BVP solver */
@DEFINE_ENABLE_LATTICE_SOLVER@

/* Enable semi-analytic BVP solver */
@DEFINE_ENABLE_SEMI_ANALYTIC_SOLVER@

/*Enable Boost multiprecision*/
@DEFINE_ENABLE_BOOST_MULTIPRECISION@

/* Enable statements for addons */
@DEFINE_ENABLE_ADDONS@

/* Define the real type */
#ifdef ENABLE_BOOST_MULTIPRECISION

#include <boost/multiprecision/mpc.hpp>
#include <boost/multiprecision/mpfr.hpp>
#include <iostream>
#include <iomanip>

//typedef boost::multiprecision::float128 fs_real_t;
//typedef boost::multiprecision::complex128 fs_complex_t;
typedef boost::multiprecision::number<boost::multiprecision::mpfr_float_backend<30>, boost::multiprecision::et_on> fs_real_t;
typedef boost::multiprecision::number<boost::multiprecision::mpc_complex_backend<30>, boost::multiprecision::et_on> fs_complex_t;
inline void precise_cout(int modify=0) { std::cout << std::setprecision(std::numeric_limits<fs_real_t>::max_digits10 + modify); }
inline const fs_real_t operator""_p(const char *a)
{ return static_cast<fs_real_t>(a); }

#else

// Boost::Multiprecision is not used
#include <complex>
#include <iostream>
#include <iomanip>

typedef double fs_real_t;
typedef std::complex<fs_real_t> fs_complex_t;
inline void precise_cout(int modify=0) { std::cout << std::setprecision(24+modify); }
inline fs_real_t operator""_p(const char *a) { return atof(a); }

#endif

inline void unprecise_cout() { std::cout << std::setprecision(6); }

#endif